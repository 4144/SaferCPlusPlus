{"name":"Safercplusplus","tagline":"A collection of safe data types that are compatible with, and can substitute for, common unsafe native c++ types.","body":"Jan 2016\r\n\r\nA collection of safe data types that are compatible with, and can substitute for, common unsafe native c++ types. Currently these include:\r\n\r\ni) A safe replacement for native pointers that, unlike std::shared_ptr for example, does not take ownership of the target (and so can point to objects on the stack).\r\n\r\nii) A safe implementation of std::vector<> - bounds checked and \"invalid iterator dereference\" checked.\r\n\r\niii) A couple of other highly compatible vectors that address the issue of unnecessary iterator invalidation upon insert, erase or reallocation\r\n\r\niv) replacements for the native \"int\", \"size_t\" and \"bool\" types that have default initialization values and address the \"signed-unsigned mismatch\" issues.\r\n\r\nTested with msvc2013 and g++4.8 (as of Dec 2015) and msvc2010 (as of Jan 2015).\r\n\r\nSee the file [msetl_blurb.pdf](https://github.com/duneroadrunner/SaferCPlusPlus/blob/master/msetl_blurb.pdf) for more info. Or just have a look at msetl_example.cpp to see the library in action.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}