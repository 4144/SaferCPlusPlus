{
  "name": "SaferCPlusPlus",
  "tagline": "Home of the high performance smart pointer.",
  "body": "Apr 2016\r\n\r\n### Overview\r\n\r\nA collection of safe data types that are compatible with, and can substitute for, common unsafe native C++ types. Currently these include:\r\n\r\n- A [fast](#simple-benchmarks), [safe replacement for native pointers](#registered-pointers) that, unlike std::shared_ptr for example, does not take ownership of the target (and so can point to objects on the stack).\r\n\r\n- A fast, safe [reference counting pointer](#reference-counting-pointers) for all those situations when you, just for a moment, contemplated using an std::shared_ptr for something other than an object shared between asynchronous threads. Including [safe parameter passing](#safely-passing-parameters-by-reference) by reference.\r\n\r\n- A \"[scope pointer](#scope-pointers)\" for target objects allocated on the stack, or whose \"owning\" pointer is allocated on the stack. By default, not as safe as the other smart pointers in this library, but with zero runtime overhead.\r\n\r\n- An almost completely [safe implementation](#vector) of std::vector<> - bounds checked, iterator checked and memory managed.\r\n\r\n- A couple of [other](#vectors) highly compatible vectors that address the issue of unnecessary iterator invalidation upon insert, erase or reallocation\r\n\r\n- [replacements](#primitives) for the native \"int\", \"size_t\" and \"bool\" types that have default initialization values and address the \"signed-unsigned mismatch\" issues.\r\n\r\nTested with msvc2015 and g++5.3 (as of Apr 2016) and msvc2013 (as of Feb 2016). Support for versions of g++ prior to version 5 was dropped on Mar 21, 2016.\r\n\r\nYou can have a look at [msetl_example.cpp](https://github.com/duneroadrunner/SaferCPlusPlus/blob/master/msetl_example.cpp) to see the library in action.\r\n\r\n\r\n### Use cases\r\n\r\nThis library is appropriate for use by two groups of C++ developers - those for whom safety and security are critical, and also everybody else.  \r\nThis library can help eliminate a lot of the opportunities for inadvertently accessing invalid memory or using uninitialized values. It essentially gets you a lot of the safety that you might get from, say Java, while retaining all of the power and most of the performance of C++.  \r\nWhile using the library may sometimes cost a modest performance penalty, because the library elements are [largely compatible](#compatibility-considerations) with their native counterparts they can be easily \"disabled\" (automatically replaced with their native counterparts) with a compile-time directive, allowing them to be used to help catch bugs in debug/test/beta modes while incurring no overhead in release mode.  \r\nSo there is really no excuse for not using the library in pretty much any situation.  \r\nFor more information on how the safe smart pointers in this library are intended to be used, see [this article](http://www.codeproject.com/Articles/1093894/How-To-Safely-Pass-Parameters-By-Reference-in-Cplu).\r\n\r\n### Setup and dependencies\r\n\r\nThe beauty of the library is that it is so small and simple. Using the library generally involves copying the include files you want to use into your project, and that's it. Three header files - \"mseprimitives.h\", \"mseregistered.h\" and \"msemstdvector.h\" - will cover most use cases. Outside of the stl, there are no other dependencies.  \r\nA couple of notes about compling: You may want to use the -Wno-unused flag with g++. With msvc you may get a \"[fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj](https://msdn.microsoft.com/en-us/library/8578y171(v=vs.140).aspx)\". Just [add](https://msdn.microsoft.com/en-us/library/ms173499.aspx) the \"/bigobj\" compile flag. For more help you can try the [questions and comments](#questions-and-comments) section.\r\n\r\n### Registered pointers\r\n\r\n\"Registered\" pointers are intended to behave just like native C++ pointers, except that their value is (automatically) set to nullptr when the target object is destroyed. And by default they will throw an exception upon any attempt to dereference a nullptr. Because they don't take ownership like some other smart pointers, they can point to objects allocated on the stack as well as the heap. In most cases, they can be used as a compatible, direct substitute for native pointers, making it straightforward to update legacy code (to be safer).\r\n\r\nRegistered pointers come in two flavors - [TRegisteredPointer](#tregisteredpointer) and [TRelaxedRegisteredPointer](#trelaxedregisteredpointer). They are both very similar. TRegisteredPointer emphasizes speed and safety a bit more, while TRelaxedRegisteredPointer emphasizes compatibility and flexibility a bit more. If you want to undertake the task of en masse replacement of native pointers in legacy code, or need to interact with legacy native pointer interfaces, TRelaxedRegisteredPointer may be more convenient.\r\n\r\nNote that these registered pointers cannot target types that cannot act as base classes. The primitive types like int, bool, etc. [cannot act as base classes](#compatibility-considerations). Fortunately, the library provides safer [substitutes](#primitives) for int, bool and size_t that can act as base classes. Also note that pointers that can point to the stack are inherently not thread safe. While we [do not encourage](#on-thread-safety) the casual sharing of objects between asynchronous threads, if you need to do so you might consider using a thread safe type such as std::share_ptr. For more information on how the safe smart pointers in this library are intended to be used, see [this article](http://www.codeproject.com/Articles/1093894/How-To-Safely-Pass-Parameters-By-Reference-in-Cplu).\r\n\r\n\r\n\r\n### TRegisteredPointer\r\n\r\nusage example:\r\n\r\n    #include \"mseregistered.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class CA {\r\n        public:\r\n            CA(int x) : m_x(x) {}\r\n            int m_x;\r\n        };\r\n    \r\n        mse::TRegisteredPointer<CA> a_ptr;\r\n        CA a2_obj(2);\r\n        {\r\n            // mse::TRegisteredObj<CA> is a class publicly derived from CA\r\n    \r\n            mse::TRegisteredObj<CA> a_obj(1); // a_obj is entirely on the stack\r\n    \r\n            a_ptr = &a_obj;\r\n            a2_obj = (*a_ptr);\r\n        }\r\n        if (a_ptr) {\r\n            assert(false);\r\n        } else {\r\n            try {\r\n                a2_obj = (*a_ptr);\r\n            }\r\n            catch (...) {\r\n                // expected exception\r\n            }\r\n        }\r\n    \r\n        a_ptr = mse::registered_new<CA>(3); // heap allocation\r\n        mse::registered_delete<CA>(a_ptr);\r\n    }\r\n\r\n\r\n### TRegisteredNotNullPointer\r\nSame as TRegisteredPointer, but cannot be constructed to a null value.\r\n\r\n### TRegisteredFixedPointer\r\nSame as TRegisteredNotNullPointer, but cannot be retargeted after construction (basically a \"const TRegisteredNotNullPointer\"). It is essentially a functional equivalent of a C++ reference and is a recommended type to be used for safe parameter passing by reference.  \r\n\r\nusage example:\r\n\r\n    #include \"mseregistered.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class CA {\r\n        public:\r\n            CA(std::string str) : m_str(str) {}\r\n            std::string m_str;\r\n        };\r\n    \r\n        class CB {\r\n        public:\r\n            static void foo(mse::TRegisteredFixedConstPointer<CA> input1_fc_ptr, mse::TRegisteredFixedConstPointer<CA> \r\n                input2_fc_ptr, mse::TRegisteredFixedPointer<CA> output_f_ptr) {\r\n                output_f_ptr->m_str = \"output from \" + input1_fc_ptr->m_str + \" and \" + input2_fc_ptr->m_str;\r\n                return;\r\n            }\r\n        };\r\n    \r\n        mse::TRegisteredObj<CA> in1_obj(\"input1\");\r\n        mse::TRegisteredPointer<CA> in2_reg_ptr = mse::registered_new<CA>(\"input2\");\r\n        mse::TRegisteredObj<CA> out_obj(\"\");\r\n    \r\n        CB::foo(&in1_obj, &(*in2_reg_ptr), &out_obj);\r\n    \r\n        mse::registered_delete<CA>(in2_reg_ptr);\r\n    }\r\n\r\n### TRegisteredConstPointer, TRegisteredNotNullConstPointer, TRegisteredFixedConstPointer\r\nJust the \"const\" versions. TRegisteredPointer&lt;X&gt; actually does implicitly convert to TRegisteredPointer&lt;const X&gt;. But some prefer to think of the pointer giving \"const\" access to the object rather than giving access to a \"const object\".\r\n\r\n### TRegisteredRefWrapper\r\nJust a registered version of [std::reference_wrapper](http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper).  \r\n\r\nusage example:\r\n\r\n    #include \"mseprimitives.h\"\r\n    #include \"mseregistered.h\"\r\n\r\n    int main(int argc, char* argv[]) {\r\n        /* This example originally comes from http://www.cplusplus.com/reference/functional/reference_wrapper/. */\r\n        mse::TRegisteredObj<mse::CInt> a(10), b(20), c(30);\r\n        // an array of \"references\":\r\n        mse::TRegisteredRefWrapper<mse::CInt> refs[] = { a,b,c };\r\n        std::cout << \"refs:\";\r\n        for (mse::CInt& x : refs) std::cout << ' ' << x;\r\n        std::cout << '\\n';\r\n    \r\n        mse::TRegisteredObj<mse::CInt> foo(10);\r\n        auto bar = mse::registered_ref(foo);\r\n        ++(mse::CInt&)bar;\r\n        std::cout << foo << '\\n';\r\n    }\r\n\r\n### TRelaxedRegisteredPointer\r\n\r\nusage example:\r\n\r\n    #include \"mserelaxedregistered.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n    \r\n        /* One case where you may need to use mse::TRelaxedRegisteredPointer<> even when not dealing with legacy code is when\r\n        you need a reference to a class before it is fully defined. For example, when you have two classes that mutually\r\n        reference each other. mse::TRegisteredPointer<> does not support this.\r\n        */\r\n    \r\n        class C;\r\n    \r\n        class D {\r\n        public:\r\n            virtual ~D() {}\r\n            mse::TRelaxedRegisteredPointer<C> m_c_ptr;\r\n        };\r\n    \r\n        class C {\r\n        public:\r\n            mse::TRelaxedRegisteredPointer<D> m_d_ptr;\r\n        };\r\n    \r\n        mse::TRelaxedRegisteredObj<C> regobjfl_c;\r\n        mse::TRelaxedRegisteredPointer<D> d_ptr = mse::relaxed_registered_new<D>();\r\n    \r\n        regobjfl_c.m_d_ptr = d_ptr;\r\n        d_ptr->m_c_ptr = &regobjfl_c;\r\n    \r\n        mse::relaxed_registered_delete<D>(d_ptr);\r\n    \r\n    }\r\n\r\n\r\n### TRelaxedRegisteredNotNullPointer\r\n\r\n### TRelaxedRegisteredFixedPointer\r\n\r\n### TRelaxedRegisteredConstPointer, TRelaxedRegisteredNotNullConstPointer, TRelaxedRegisteredFixedConstPointer\r\nTRelaxedRegisteredPointer&lt;X&gt; actually does implicitly convert to TRelaxedRegisteredPointer&lt;const X&gt;. But some prefer to think of the pointer giving \"const\" access to the object rather than giving access to a \"const object\".\r\n  \r\n### Simple benchmarks\r\n\r\nJust some simple microbenchmarks. We show the results for msvc2015 and msvc2013 (run on the same machine), since there are some interesting differences. The source code for these benchmarks can be found in the file [msetl_example.cpp](https://github.com/duneroadrunner/SaferCPlusPlus/blob/master/msetl_example.cpp).\r\n\r\n#### Allocation, deallocation, pointer copy and assignment:\r\n##### platform: msvc2015/x64/Windows7/Haswell (Mar 2016):\r\nPointer Type | Time\r\n------------ | ----\r\nmse::TRegisteredPointer (stack): | 0.0317188 seconds.\r\nnative pointer (heap): | 0.0394826 seconds.\r\nmse::TRefCountingPointer (heap): | 0.0493629 seconds.\r\nmse::TRegisteredPointer (heap): | 0.0573699 seconds.\r\nstd::shared_ptr (heap): | 0.0692405 seconds.\r\nmse::TRelaxedRegisteredPointer (heap): | 0.14475 seconds.\r\n\r\n##### platform: msvc2013/x64/Windows7/Haswell (Jan 2016):\r\nPointer Type | Time\r\n------------ | ----\r\nmse::TRegisteredPointer (stack): | 0.0270016 seconds.\r\nnative pointer (heap): | 0.0490028 seconds.\r\nmse::TRegisteredPointer (heap): | 0.0740042 seconds.\r\nstd::shared_ptr (heap): | 0.087005 seconds.\r\nmse::TRelaxedRegisteredPointer (heap): | 0.142008 seconds.\r\n\r\nTake these results with a grain of salt. The benchmarks were run on a noisy machine, and anyway don't represent realistic usage scenarios. But I'm guessing the general gist of the results is valid. Interestingly, three of the scenarios seemed to have gotten noticeably faster between msvc2013 and msvc2015.  \r\nI'm speculating here, but it might be the case that the heap operations that occur in this benchmark may be more \"cache friendly\" than heap operations in real world code would be, making the \"heap\" results look artificially good (relative to the \"stack\" result).\r\n\r\n#### Dereferencing:\r\n##### platform: msvc2015/x64/Windows7/Haswell (Mar 2016):\r\nPointer Type | Time\r\n------------ | ----\r\nnative pointer: | 0.0105804 seconds.\r\nmse::TRelaxedRegisteredPointer unchecked: | 0.0136354 seconds.\r\nmse::TRefCountingPointer (checked): | 0.0258107 seconds.\r\nmse::TRelaxedRegisteredPointer (checked): | 0.0308289 seconds.\r\nstd::weak_ptr: | 0.179833 seconds.\r\n\r\n##### platform: msvc2013/x64/Windows7/Haswell (Jan 2016):\r\nPointer Type | Time\r\n------------ | ----\r\nnative pointer: | 0.0100006 seconds.\r\nmse::TRelaxedRegisteredPointer unchecked: | 0.0130008 seconds.\r\nmse::TRelaxedRegisteredPointer (checked): | 0.016001 seconds.\r\nstd::weak_ptr: | 0.17701 seconds.\r\n\r\nThe interesting thing here is that checking for nullptr seems to have gotten a lot slower between msvc2013 and msvc2015. But anyway, my guess is that pointer dereferencing is such a fast operation (std::weak_ptr aside) that outside of critical inner loops, the overhead of checking for nullptr would generally be probably pretty modest.  \r\nAlso note that [mse::TRefCountingNotNullPointer](#trefcountingnotnullpointer) and [mse::TRefCountingFixedPointer](#trefcountingfixedpointer) always point to a validly allocated object, so their dereferences don't need to be checked. mse::TRegisteredPointer's safety mechanisms are not compatible with the techniques used by the benchmark to isolate dereferencing performance, but mse::TRegisteredPointer's dereferencing performance would be expected to be essentially identical to that of mse::TRelaxedRegisteredPointer. By default, scope pointers have identical performance to native pointers.\r\n\r\n###Reference counting pointers\r\n\r\nIf you're going to use pointers, then to ensure they won't be used to access invalid memory you basically have two options - detect any attempt to do so and throw an exception, or, alternatively, ensure that the pointer targets a validly allocated object. Registered pointers rely on the former, and so-called \"reference counting\" pointers can be used to achieve the latter. The most famous reference counting pointer is std::shared_ptr, which is notable for its thread-safe reference counting that's rather handy when you're sharing an object among asynchronous threads, but unnecessarily costly when you aren't. So we provide fast reference counting pointers that [forego](#on-thread-safety) any thread safety mechanisms. In addition to being substantially faster (and smaller) than std::shared_ptr, they are a bit more safety oriented in that they they don't support construction from raw pointers. (Use mse::make_refcounting&lt;&gt;() instead.) \"Const\", \"not null\" and \"fixed\" (non-retargetable) flavors are also provided with proper conversions between them. For more information on how the safe smart pointers in this library are intended to be used, see [this article](http://www.codeproject.com/Articles/1093894/How-To-Safely-Pass-Parameters-By-Reference-in-Cplu).\r\n\r\n\r\n###TRefCountingPointer\r\n\r\nusage example:\r\n\r\n\t#include \"mserefcounting.h\"\r\n\t\r\n\tint main(int argc, char* argv[]) {\r\n\t\tclass A {\r\n\t\tpublic:\r\n\t\t\tA() {}\r\n\t\t\tA(const A& _X) : b(_X.b) {}\r\n\t\t\tvirtual ~A() {\r\n\t\t\t\tint q = 3; /* just so you can place a breakpoint if you want */\r\n\t\t\t}\r\n\t\t\tA& operator=(const A& _X) { b = _X.b; return (*this); }\r\n\r\n\t\t\tint b = 3;\r\n\t\t};\r\n\t\ttypedef std::vector<mse::TRefCountingFixedPointer<A>> CRCFPVector;\r\n\t\tclass B {\r\n\t\tpublic:\r\n\t\t\tstatic int foo1(mse::TRefCountingPointer<A> A_refcounting_ptr, CRCFPVector& rcfpvector_ref) {\r\n\t\t\t\trcfpvector_ref.clear();\r\n\t\t\t\tint retval = A_refcounting_ptr->b;\r\n\t\t\t\tA_refcounting_ptr = nullptr; /* Target object is destroyed here. */\r\n\t\t\t\treturn retval;\r\n\t\t\t}\r\n\t\tprotected:\r\n\t\t\t~B() {}\r\n\t\t};\r\n\r\n\t\t{\r\n\t\t\tCRCFPVector rcfpvector;\r\n\t\t\t{\r\n\t\t\t\tmse::TRefCountingFixedPointer<A> A_refcountingfixed_ptr1 = mse::make_refcounting<A>();\r\n\t\t\t\trcfpvector.push_back(A_refcountingfixed_ptr1);\r\n\r\n\t\t\t\t/* Just to demonstrate conversion between refcounting pointer types. */\r\n\t\t\t\tmse::TRefCountingConstPointer<A> A_refcountingconst_ptr1 = A_refcountingfixed_ptr1;\r\n\t\t\t}\r\n\t\t\tB::foo1(rcfpvector.front(), rcfpvector);\r\n\t\t}\r\n\t}\r\n\r\n\r\n### TRefCountingNotNullPointer\r\n\r\nSame as TRefCountingPointer, but cannot be constructed to or assigned a null value. Because TRefCountingNotNullPointer controls the lifetime of it's target it, should be always safe to assume that it points to a validly allocated object.\r\n\r\n### TRefCountingFixedPointer\r\n\r\nSame as TRefCountingNotNullPointer, but cannot be retargeted after construction (basically a \"const TRefCountingNotNullPointer\"). It is a recommended type to be used for safe parameter passing by reference.\r\n\r\n### TRefCountingConstPointer, TRefCountingNotNullConstPointer, TRefCountingFixedConstPointer\r\n\r\nJust the \"const\" versions. TRefCountingPointer&lt;X&gt; actually does implicitly convert to TRefCountingPointer&lt;const X&gt;. But some prefer to think of the pointer giving \"const\" access to the object rather than giving access to a \"const object\".\r\n\r\n\r\n###TStrongFixedPointer\r\n\r\nTStrongFixedPointer is primarily intended to be used as a safe pointer to a member of a class/struct owned by a reference counting pointer. TStrongFixedPointer essentially acts as a pointer to the member (or whatever object you specify), while keeping a copy of the reference counting pointer (or whatever owner you specify) to ensure that the object is not deallocated while you're still using it. Use mse::make_strong() to construct a TStrongFixedPointer.  \r\n\r\nusage example:\r\n\r\n    #include \"mserefcounting.h\"\r\n    \r\n    class H {\r\n    public:\r\n        static std::string foo2(mse::TStrongFixedPointer<std::string, mse::TRefCountingFixedPointer<A>> strong_string_ptr, CRCFPVector& rcfpvector_ref) {\r\n            rcfpvector_ref.clear();\r\n            std::string retval = (*strong_string_ptr);\r\n            return retval;\r\n        }\r\n    \r\n        template<class _TString1Pointer, class _TString2Pointer>\r\n        static std::string foo6(_TString1Pointer i1ptr, _TString2Pointer i2ptr) {\r\n            return (*i1ptr) + (*i2ptr);\r\n        }\r\n    protected:\r\n        ~H() {}\r\n    };\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class A {\r\n        public:\r\n            A() {}\r\n            A(const A& _X) : b(_X.b) {}\r\n            virtual ~A() {\r\n                int q = 3; /* just so you can place a breakpoint if you want */\r\n            }\r\n            A& operator=(const A& _X) { b = _X.b; return (*this); }\r\n\r\n            int b = 3;\r\n            std::string s = \"some text \";\r\n        };\r\n        typedef std::vector<mse::TRefCountingFixedPointer<A>> CRCFPVector;\r\n\r\n        {\r\n            CRCFPVector rcfpvector;\r\n            {\r\n                mse::TRefCountingFixedPointer<A> A_refcountingfixed_ptr1 = mse::make_refcounting<A>();\r\n                rcfpvector.push_back(A_refcountingfixed_ptr1);\r\n            }\r\n\r\n            /* strong_string_ptr1 here is essentially a pointer to \"A.s\" (the string member of class A) welded\r\n            to a refcounting pointer to A to make sure that the object is not deallocated while strong_string_ptr1\r\n            is still around. */\r\n            auto strong_string_ptr1 = mse::make_strong(rcfpvector.front()->s, rcfpvector.front());\r\n            H::foo2(strong_string_ptr1, rcfpvector);\r\n\r\n            /* In practice, rather than declaring a specific mse::TStrongFixedPointer parameter, we expect\r\n            functions to be \"templatized\" so that they can accept any type of pointer. */\r\n            std::string res1 = H::foo6(strong_string_ptr1, strong_string_ptr1);\r\n        }\r\n    }\r\n\r\n### TRefCountingOfRegisteredPointer\r\n\r\nTRefCountingOfRegisteredPointer is simply an alias for TRefCountingPointer&lt;TRegisteredObj&lt;_Ty&gt;&gt;. TRegisteredObj&lt;_Ty&gt; is meant to behave much like, and be compatible with a _Ty. The reason why we might want to use it is because the &amp; (\"address of\") operator of TRegisteredObj&lt;_Ty&gt; returns a [TRegisteredFixedPointer&lt;_Ty&gt;](#tregisteredfixedpointer) rather than a raw pointer, and TRegisteredPointers can serve as safe \"weak pointers\".  \r\n\r\nusage example:  \r\n\r\n    #include \"mserefcountingofregistered.h\"\r\n    \r\n    class H {\r\n    public:\r\n        /* An example of a templated member function. In this case it's a static one, but it doesn't have to be.\r\n        You might consider templating pointer parameter types to give the caller some flexibility as to which kind of\r\n        (smart/safe) pointer they want to use. */\r\n    \r\n        template<typename _Tpointer, typename _Tvector>\r\n        static int foo5(_Tpointer A_ptr, _Tvector& vector_ref) {\r\n            int tmp = A_ptr->b;\r\n            int retval = 0;\r\n            vector_ref.clear();\r\n            if (A_ptr) {\r\n                retval = A_ptr->b;\r\n            }\r\n            else {\r\n                retval = -1;\r\n            }\r\n            return retval;\r\n        }\r\n    protected:\r\n        ~H() {}\r\n    };\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class A {\r\n        public:\r\n            A() {}\r\n            A(const A& _X) : b(_X.b) {}\r\n            virtual ~A() {\r\n                int q = 3; /* just so you can place a breakpoint if you want */\r\n            }\r\n            A& operator=(const A& _X) { b = _X.b; return (*this); }\r\n\r\n            int b = 3;\r\n        };\r\n        typedef std::vector<mse::TRefCountingOfRegisteredFixedPointer<A>> CRCRFPVector;\r\n    \r\n        {\r\n            CRCRFPVector rcrfpvector;\r\n            {\r\n                mse::TRefCountingOfRegisteredFixedPointer<A> A_refcountingofregisteredfixed_ptr1 = mse::make_refcountingofregistered<A>();\r\n                rcrfpvector.push_back(A_refcountingofregisteredfixed_ptr1);\r\n    \r\n                /* Just to demonstrate conversion between refcountingofregistered pointer types. */\r\n                mse::TRefCountingOfRegisteredConstPointer<A> A_refcountingofregisteredconst_ptr1 = A_refcountingofregisteredfixed_ptr1;\r\n            }\r\n            int res1 = H::foo5(rcrfpvector.front(), rcrfpvector);\r\n            assert(3 == res1);\r\n    \r\n            rcrfpvector.push_back(mse::make_refcountingofregistered<A>());\r\n            /* The first parameter in this case will be a TRegisteredFixedPointer<A>. */\r\n            int res2 = H::foo5(&(*rcrfpvector.front()), rcrfpvector);\r\n            assert(-1 == res2);\r\n        }\r\n    }\r\n\r\n### TRefCountingOfRegisteredNotNullPointer, TRefCountingOfRegisteredFixedPointer\r\n### TRefCountingOfRegisteredConstPointer, TRefCountingOfRegisteredNotNullConstPointer, TRefCountingOfRegisteredFixedConstPointer\r\n\r\n### TRefCountingOfRelaxedRegisteredPointer\r\n\r\nTRefCountingOfRelaxedRegisteredPointer is simply an alias for TRefCountingPointer&lt;TRelaxedRegisteredObj&lt;_Ty&gt;&gt;. Generally you should prefer to just use TRefCountingOfRegisteredPointer, but if you need a \"weak pointer\" to refer to a type before it's fully defined then you can use this type. An example of such a situation is when you have so-called \"cyclic references\".  \r\n\r\nusage example:  \r\n\r\n    #include \"mserefcountingofrelaxedregistered.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n    \r\n        /* Here we demonstrate using TRelaxedRegisteredFixedPointer<> as a safe \"weak_ptr\" to prevent \"cyclic references\" from\r\n        becoming memory leaks. */\r\n    \r\n        class CRCNode {\r\n        public:\r\n            CRCNode(mse::TRegisteredFixedPointer<mse::CInt> node_count_ptr\r\n                , mse::TRelaxedRegisteredPointer<CRCNode> root_ptr) : m_node_count_ptr(node_count_ptr), m_root_ptr(root_ptr) {\r\n                (*node_count_ptr) += 1;\r\n            }\r\n            CRCNode(mse::TRegisteredFixedPointer<mse::CInt> node_count_ptr) : m_node_count_ptr(node_count_ptr) {\r\n                (*node_count_ptr) += 1;\r\n            }\r\n            virtual ~CRCNode() {\r\n                (*m_node_count_ptr) -= 1;\r\n            }\r\n            static mse::TRefCountingOfRelaxedRegisteredFixedPointer<CRCNode> MakeRoot(mse::TRegisteredFixedPointer<mse::CInt> node_count_ptr) {\r\n                auto retval = mse::make_refcountingofrelaxedregistered<CRCNode>(node_count_ptr);\r\n                (*retval).m_root_ptr = &(*retval);\r\n                return retval;\r\n            }\r\n            mse::TRefCountingOfRelaxedRegisteredPointer<CRCNode> ChildPtr() const { return m_child_ptr; }\r\n            mse::TRefCountingOfRelaxedRegisteredFixedPointer<CRCNode> MakeChild() {\r\n                auto retval = mse::make_refcountingofrelaxedregistered<CRCNode>(m_node_count_ptr, m_root_ptr);\r\n                m_child_ptr = retval;\r\n                return retval;\r\n            }\r\n            void DisposeOfChild() {\r\n                m_child_ptr = nullptr;\r\n            }\r\n    \r\n        private:\r\n            mse::TRegisteredFixedPointer<mse::CInt> m_node_count_ptr;\r\n            mse::TRefCountingOfRelaxedRegisteredPointer<CRCNode> m_child_ptr;\r\n            mse::TRelaxedRegisteredPointer<CRCNode> m_root_ptr;\r\n        };\r\n    \r\n        mse::TRegisteredObj<mse::CInt> node_counter = 0;\r\n        {\r\n            mse::TRefCountingOfRelaxedRegisteredPointer<CRCNode> root_ptr = CRCNode::MakeRoot(&node_counter);\r\n            auto kid1 = root_ptr->MakeChild();\r\n            {\r\n                auto kid2 = kid1->MakeChild();\r\n                auto kid3 = kid2->MakeChild();\r\n            }\r\n            assert(4 == node_counter);\r\n            kid1->DisposeOfChild();\r\n            assert(2 == node_counter);\r\n        }\r\n        assert(0 == node_counter);\r\n    }\r\n\r\n### TRefCountingOfRelaxedRegisteredNotNullPointer, TRefCountingOfRelaxedRegisteredFixedPointer\r\n### TRefCountingOfRelaxedRegisteredConstPointer, TRefCountingOfRelaxedRegisteredNotNullConstPointer, TRefCountingOfRelaxedRegisteredFixedConstPointer\r\n\r\n### Scope pointers\r\nScope pointers are different from other smart pointers in the library in that, by default, they have no runtime safety enforcement mechanism, and the compile-time safety mechanisms aren't (yet) quite sufficient to ensure that they will be used in an intrinsically safe manner. Scope pointers point to scope objects. Scope objects are objects that are allocated on the stack, or whose \"owning\" pointer is allocated on the stack. So basically the object is destroyed when it, or it's owner, goes out of scope. The purpose of scope pointers and objects is to identify a class of situations that are simple and deterministic enough that no (runtime) safety mechanisms are necessary. In theory, a tool could be constructed to verify that scope pointers are used in a safe manner at compile-time. But in the mean time we provide the option of using a relaxed registered pointer as the scope pointer's base class for enhanced safety and to help catch misuse. Defining MSE_SCOPEPOINTER_USE_RELAXED_REGISTERED will cause relaxed registered pointers to be used in debug mode. Additionally defining MSE_SCOPEPOINTER_RUNTIME_CHECKS_ENABLED will cause them to be used in non-debug modes as well. And as with registered pointers, scope pointers cannot target types that cannot act as a base class. For int, bool and size_t use the safer [substitutes](#primitives) that can act as base classes.\r\n\r\nThere are two types of scope pointers, [TScopeFixedPointer](#tscopefixedpointer) and [TScopeOwnerPointer](#tscopeownerpointer). TScopeOwnerPointer is similar to boost::scoped_ptr in functionality (but more limited in intended use). It creates an instance of a given class on the heap and destroys that instance in its destructor. (We use \"scope\" to mean \"execution scope\", where in boost it seems to refer to \"declaration scope\".) TScopeFixedPointer is a \"non-owning\" (or \"weak\") pointer to a scope object. It is (intentionally) limited in it's functionality, and is intended pretty much for the sole purpose of passing scope objects by reference as function arguments. For more information on how the safe smart pointers in this library are intended to be used, see [this article](http://www.codeproject.com/Articles/1093894/How-To-Safely-Pass-Parameters-By-Reference-in-Cplu).\r\n\r\n\r\n### TScopeFixedPointer\r\nusage example:\r\n\r\n    #include \"msescope.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class A {\r\n        public:\r\n            A(int x) : b(x) {}\r\n            A(const A& _X) : b(_X.b) {}\r\n            virtual ~A() {}\r\n            A& operator=(const A& _X) { b = _X.b; return (*this); }\r\n\r\n            int b = 3;\r\n        };\r\n        class B {\r\n        public:\r\n            static int foo2(mse::TScopeFixedPointer<A> A_scpfptr) { return A_scpfptr->b; }\r\n            static int foo3(mse::TScopeFixedConstPointer<A> A_scpfcptr) { return A_scpfcptr->b; }\r\n        protected:\r\n            ~B() {}\r\n        };\r\n    \r\n        mse::TScopeObj<A> a_scpobj(5);\r\n        int res1 = (&a_scpobj)->b;\r\n        int res2 = B::foo2(&a_scpobj);\r\n        int res3 = B::foo3(&a_scpobj);\r\n    }\r\n\r\n### TScopeFixedConstPointer\r\nTScopeFixedPointer&lt;X&gt; actually does implicitly convert to TScopeFixedPointer&lt;const X&gt;. But some prefer to think of the pointer giving \"const\" access to the object rather than giving access to a \"const object\".\r\n\r\n### TScopeOwnerPointer\r\nTScopeOwnerPointer is similar to boost::scoped_ptr in functionality, but more limited in intended use. In particular, TScopeOwnerPointer is not intended to be used as a member of any class or struct. Use it when you want to give scope lifetime to objects that are too large to be declared directly on the stack. Also, instead of its constructor taking a native pointer pointing to the already allocated object, it allocates the object itself and passes its contruction arguments to the object's constructor.  \r\n\r\nusage example:\r\n\r\n    #include \"msescope.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        class A {\r\n        public:\r\n            A(int x) : b(x) {}\r\n            A(const A& _X) : b(_X.b) {}\r\n            virtual ~A() {}\r\n            A& operator=(const A& _X) { b = _X.b; return (*this); }\r\n\r\n            int b = 3;\r\n        };\r\n        class B {\r\n        public:\r\n            static int foo2(mse::TScopeFixedPointer<A> A_scpfptr) { return A_scpfptr->b; }\r\n            static int foo3(mse::TScopeFixedConstPointer<A> A_scpfcptr) { return A_scpfcptr->b; }\r\n        protected:\r\n            ~B() {}\r\n        };\r\n    \r\n        mse::TScopeOwnerPointer<A> a_scpoptr(7);\r\n        int res4 = B::foo2(&(*a_scpoptr));\r\n    }\r\n\r\n### Safely passing parameters by reference\r\nAs has been shown, you can use TRegisteredPointers or TRefCountingPointers to safely pass parameters by reference. If you're writing a function for more general use, and for some reason you can only support one parameter type, we would probably recommend TRegisteredPointers over TRefCountingPointers, just because of their support for stack allocated targets. But much more preferable might be to \"templatize\" your function so that it can accept any type of pointer. This is demonstrated in the [TRefCountingOfRegisteredPointer](#trefcountingofregisteredpointer) usage example. Or you can read an article about it [here](http://www.codeproject.com/Articles/1093894/How-To-Safely-Pass-Parameters-By-Reference-in-Cplu).\r\n\r\n### Primitives\r\n### CInt, CSize_t and CBool\r\nThese classes are meant to behave like, and be compatible with their native counterparts. They have default initialization values to help ensure deterministic behavior. Upon value assignment, CInt and CSize_t will check to ensure that the value fits within the type's range. CSize_t's `-=` operator checks that the operation evaluates to a positive value. And unlike its native counterpart, arithmetic operations involving CSize_t that could evaluate to a negative number are returned as a (signed) CInt.\r\n\r\nusage example:\r\n\r\n    #include \"mseprimitives.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n    \r\n        mse::CInt i = 5;\r\n        i -= 17;\r\n        mse::CSize_t szt = 5;\r\n        szt += 3;\r\n        auto i2 = szt + i;\r\n        mse::CBool b = false;\r\n        if (-4 == i2) {\r\n            b = true;\r\n        }\r\n        if (b) {\r\n            try {\r\n                szt -= 20; // out of range result - this is going to throw an exception\r\n            }\r\n            catch (...) {\r\n                // expected exception\r\n            }\r\n        }\r\n    }\r\n\r\nNote: Although these types have default initialization to ensure deterministic code, for variables of these types please continue to explicitly set their value before using them, as you would with their corresponding primitive types. If you would like a type that does not require explicit initialization before use, you can just publicly derive your own type from the appropriate class in this library.  \r\nAlso see the section on \"[compatibility considerations](#compatibility-considerations)\".\r\n\r\n### Quarantined types\r\n\r\nQuarantined types are meant to hold values that are obtained from user input or some other untrusted source (like a media file for example). These are not yet available in the library, but are an important concept with respect to safe programming. Values obtained from untrusted sources are the main attack vector of malicious actors and should be handled with special care. For example, the so-called \"stagefright\" vulnerability in the Android OS is the result of a specially crafted media file causing the sum of integers to overflow.  \r\nIt is often the case that untrusted values are obtained through intrinsically slow communication mediums (i.e. file system, internet, UI, etc.), so it often makes no perceptible difference whether the code that processes those untrusted values into \"trusted\" internal values is optimized for performance or not. So don't hesitate to use whatever safety methods are called for. In particular, integer types with more comprehensive range checking can be found here: https://github.com/robertramey/safe_numerics.\r\n\r\n### CQuarantinedInt, CQuarantinedSize_t, CQuarantinedVector, CQuarantinedString\r\n\r\nNot yet available.\r\n\r\n### Vectors\r\n\r\nWe provide three vectors - [mstd::vector<>](#vector), [msevector<>](#msevector) and [ivector<>](#ivector). mstd::vector<> is simply an almost completely safe implementation of std::vector<>.\r\nmsevector<> is also quite safe. Not quite as safe as mstd::vector<>, but it requires less overhead. msevector<> also supports a new kind of iterator in addition to the standard vector iterator. This new iterator, called \"ipointer\", acts more like a list iterator. It's more intuitive, more useful, and isn't prone to being invalidated upon an insert or delete operation. If performance is of concern, msevector<> is probably the better choice of the three.\r\nivector<> is just as safe as mstd::vector<>, but drops support for the (problematic) standard vector iterators and only supports the ipointer iterators.\r\n\r\n### vector\r\n\r\nmstd::vector<> is simply an almost completely safe implementation of std::vector<>.\r\n\r\nusage example:\r\n\r\n    #include \"msemstdvector.h\"\r\n    #include <vector>\r\n    \r\n    int main(int argc, char* argv[]) {\r\n    \r\n        mse::mstd::vector<int> mv;\r\n        std::vector<int> sv;\r\n        /* These two vectors should be completely interchangeable. The difference being that mv should throw\r\n        an exception on any attempt to access invalid memory. */\r\n    }\r\n\r\n### msevector\r\n\r\nIf you're willing to forego a little theoretical safety, msevector<> is still very safe without the overhead of memory management.  \r\nIn addition to the (high performance) standard vector iterator, msevector<> also supports a new kind of iterator, called \"ipointer\", that acts more like a list iterator in the sense that it points to an item rather than a position, and like a list iterator, it is not invalidated by insertions or deletions occurring elsewhere in the container, even if a \"reallocation\" occurs. In fact, standard vector iterators are so prone to being invalidated that for algorithms involving insertion or deletion, they can be generously considered not very useful, and more prudently considered dangerous. ipointers, aside from being safe, just make sense. Algorithms that work when applied to list iterators will work when applied to ipointers. And that's important as Bjarne famously [points out](https://www.youtube.com/watch?v=YQs6IC-vgmo), for cache coherency reasons, in most cases vectors should be used in place of lists, even when lists are conceptually more appropriate.  \r\nmsevector<> also provides a safe (bounds checked) version of the standard vector iterator.\r\n\r\nusage example:\r\n\r\n    #include \"msemsevector.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n        \r\n        mse::msevector<int> v1 = { 1, 2, 3, 4 };\r\n        mse::msevector<int> v = v1;\r\n        {\r\n            mse::msevector<int>::ipointer ip1 = v.ibegin();\r\n            ip1 += 2;\r\n            assert(3 == (*ip1));\r\n            auto ip2 = v.ibegin(); /* ibegin() returns an ipointer */\r\n            v.erase(ip2); /* remove the first item */\r\n            assert(3 == (*ip1)); /* ip1 continues to point to the same item, not the same position */\r\n            ip1--;\r\n            assert(2 == (*ip1));\r\n            for (mse::msevector<int>::cipointer cip = v.cibegin(); v.ciend() != cip; cip++) {\r\n                /* You might imagine what would happen if cip were a regular vector iterator. */\r\n                v.insert(v.ibegin(), (*cip));\r\n            }\r\n        }\r\n        v = v1;\r\n        {\r\n            /* This code block is equivalent to the previous code block, but uses ipointer's more \"readable\" interface\r\n            that might make the code a little more clear to those less familiar with C++ syntax. */\r\n            mse::msevector<int>::ipointer ip_vit1 = v.ibegin();\r\n            ip_vit1.advance(2);\r\n            assert(3 == ip_vit1.item());\r\n            auto ip_vit2 = v.ibegin();\r\n            v.erase(ip_vit2);\r\n            assert(3 == ip_vit1.item());\r\n            ip_vit1.set_to_previous();\r\n            assert(2 == ip_vit1.item());\r\n            mse::msevector<int>::cipointer cip(v);\r\n            for (cip.set_to_beginning(); cip.points_to_an_item(); cip.set_to_next()) {\r\n                v.insert_before(v.ibegin(), (*cip));\r\n            }\r\n        }\r\n    \r\n        /* Btw, ipointers are compatible with stl algorithms, like any other stl iterators. */\r\n        std::sort(v.ibegin(), v.iend());\r\n    \r\n        /* And just to be clear, mse::msevector<> retains it's original (high performance) stl::vector iterators. */\r\n        std::sort(v.begin(), v.end());\r\n    \r\n        /* mse::msevector<> also provides \"safe\" (bounds checked) versions of the original stl::vector iterators. */\r\n        std::sort(v.ss_begin(), v.ss_end());\r\n    }\r\n\r\nipointers support all the standard iterator operators, but also have member functions with \"friendlier\" names including:\r\n\r\n    bool points_to_an_item() const;\r\n    bool points_to_end_marker() const;\r\n    bool points_to_beginning() const;\r\n    /* has_next_item_or_end_marker() is just an alias for points_to_an_item(). */\r\n    bool has_next_item_or_end_marker() const;\r\n    /* has_next() is just an alias for points_to_an_item() that may be familiar to java programmers. */\r\n    bool has_next() const;\r\n    bool has_previous() const;\r\n    void set_to_beginning();\r\n    void set_to_end_marker();\r\n    void set_to_next();\r\n    void set_to_previous();\r\n    void advance(difference_type n);\r\n    void regress(difference_type n);\r\n    reference item() const { return operator*(); }\r\n    reference previous_item() const;\r\n    CSize_t position() const;\r\n    void reset();\r\n\r\n### ivector\r\n\r\nivector is for cases when safety and correctness are higher priorities than compatibility and performance. ivector, like mstd::vector<>, is almost completely safe. ivector takes the further step of dropping support for the (problematic) standard vector iterator, and replacing it with [ipointer](#msevector).\r\n\r\nusage example:\r\n\r\n    #include \"mseivector.h\"\r\n    \r\n    int main(int argc, char* argv[]) {\r\n    \r\n        mse::ivector<int> iv = { 1, 2, 3, 4 };\r\n        std::sort(iv.begin(), iv.end());\r\n        mse::ivector<int>::ipointer ivip = iv.begin();\r\n    }\r\n\r\n\r\n### Compatibility considerations\r\nPeople have asked why the primitive C++ types can't be used as base classes - http://stackoverflow.com/questions/2143020/why-cant-i-inherit-from-int-in-c. It turns out that really the only reason primitive types weren't made into full-fledged classes is that they inherit these \"chaotic\" conversion rules from C that can't be fully mimicked by C++ classes, and Bjarne thought it would be too ugly to try to make special case classes that followed different conversion rules.  \r\nBut while substitute classes cannot be 100% compatible substitutes for their corresponding primitives, they can still be mostly compatible. And if you're writing new code or maintaining existing code, it should be considered good coding practice to ensure that your code is compatible with C++'s conversion rules for classes and not dependent on the \"chaotic\" legacy conversion rules of primitive types.\r\n\r\nIf you are using legacy code or libraries where it's not practical to update the code, it shouldn't be a problem to continue using primitive types there and the safer substitute classes elsewhere in the code. The safer substitute classes generally have no problem interacting with primitive types, although in some cases you may need to do some explicit type casting. Registered pointers can be cast to raw pointers, and, for example, CInt can participate in arithmetic operations with regular ints.\r\n\r\n### On thread safety\r\nThe choice to not include any thread safety mechanisms in the types in this library is a deliberate one. If the goal is code safety, then we strongly discourage the casual sharing of objects between asynchronous threads. The practice of sharing objects between asynchronous threads can be prone to severe and insidious bugs that are particularly adept at evading exposure during testing. If for some reason you can't avoid the practice, we suggest doing so only in the context of some kind of system that comprehensively ensures against inadvertent unsafe access.  \r\nTo be clear, we are not discouraging asynchronous programming, or even inter-thread communication in general. Just the \"casual\" sharing of objects between asynchronous threads.\r\n\r\n### Questions and comments\r\nCreate a post in the [issues section](https://github.com/duneroadrunner/SaferCPlusPlus/issues) I guess.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}